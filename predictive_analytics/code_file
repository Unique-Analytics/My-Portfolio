library("curl")
library("httr")
library("rjson")
library(purrr)
library(stringr)
require(plyr)
library(readxl)
packageVersion("readxl")

path <- Sys.getenv("HOME")


###API goes here
api <-""
api2 <- ""


predict <- read.csv(capture.output(cat(paste0(path, "\\","Film_Databases","\\","ds_film_input3.csv"))))
dataset2 <- read.csv(capture.output(cat(paste0(path, "\\","Film_Databases","\\","ds_film_dataset.csv"))))

predict$Title <- iconv(predict$Title, "UTF-8", "UTF-8",sub='')

predict$Release.Year <- as.character(predict$Release.Year)
predict$Running.Time <- as.character(predict$Running.Time)
predict$Budget <- as.character(predict$Budget)
##predict = subset(predict, select = -c(Keyword) )
predict2 = subset(predict, select = -c(Accolades) )

ds <- as.vector(predict)
ds <- unname(ds)
ds <- ds %>% purrr::transpose()

ds2 <- as.vector(predict2)
ds2 <- unname(ds2)
ds2 <- ds2 %>% purrr::transpose()


#########predict revenue
requestFailed = function(response) {
    return (response$status_code >= 400)
}

printHttpResult = function(response, result) {
    if (requestFailed(response)) {
        print(paste("The request failed with status code:", response$status_code, sep=" "))
    
        # Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
        print(response$headers)
    }
    
    print("Result:") 
    print(fromJSON(result))  
}

req = list(
    
    Inputs = list( 
        "input1" = list(
            "ColumnNames" = list("Title", "Genre", "Film Type", "Release Year", "Release Month", "Season", "Running Time", "Budget", "Accolades", "Home Media", "Category"),
            "Values" = ds
        )
    ),
    GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = api # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')

response = POST(url= "https://ussouthcentral.services.azureml.net/workspaces/abddcdcde8ce4b61a476ffd630cd6394/services/983b282f70c14cf9983c998116c3852c/execute?api-version=2.0&details=true",
        add_headers("Content-Type" = "application/json", "Authorization" = authz_hdr),
        body = body)


http_status(response)
response1 <- response


#############predict accolades
requestFailed = function(response) {
     return (response$status_code >= 400)
 }
 
printHttpResult = function(response, result) {
     if (requestFailed(response)) {
         print(paste("The request failed with status code:", response$status_code, sep=" "))
         
         # Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
         print(response$headers)
     }
     
     print("Result:") 
     print(fromJSON(result))  
 }
 
 
req = list(
     
     Inputs = list(
         
        
         "Enter Film Data" = list(
             "ColumnNames" = list("Title", "Genre", "Film Type", "Release Year", "Release Month", "Season", "Running Time", "Budget", "Home Media", "Category"),
             "Values" = ds2
         )                ),
     GlobalParameters = setNames(fromJSON('{}'), character(0))
 )
 
 body = enc2utf8(toJSON(req))
 api_key = api2 # Replace this with the API key for the web service
 authz_hdr = paste('Bearer', api_key, sep=' ')
 
 response = POST(url= "https://ussouthcentral.services.azureml.net/workspaces/abddcdcde8ce4b61a476ffd630cd6394/services/b4975108a56142b49cb7daeb76b59844/execute?api-version=2.0&details=true",
                 add_headers("Content-Type" = "application/json", "Authorization" = authz_hdr),
                 body = body)

http_status(response)
print(response)
response2 <- response

#####Format results

json <- httr::content(response1, as = "text")
df <- fromJSON(json)
df <- as.data.frame(df)
Scored.Labels <- df$Results.Quantile.Range..10....90......Revenue.Prediction.value.Values


json <- httr::content(response2, as = "text")
df2 <- fromJSON(json)
df2 <- as.data.frame(df2)
Scored.Labels2 <- df2$Results.Scored.Accolades.Prediction.value.Values

final <- cbind(predict,Scored.Labels,Scored.Labels2)

#####merge new data with existing data 
final <- rbind.fill(dataset2,final)

dataset2 <- unique(final)
